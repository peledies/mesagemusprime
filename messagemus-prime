#!/bin/bash

gold=$(tput setaf 3)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
default=$(tput sgr0)

cols=`tput cols`

wrap_message_body() {
  default=0
  pad=$1
  msg=$2
  available_width=$(($cols - $pad))
  echo "$msg" | fold -w $available_width -s
}

function message_box() {
  # lets get the message wrapped based on terminal width
  name_pad=$((${#2} + 4))
  m=$(wrap_message_body $name_pad "$3")

  message=()
  while IFS= read -r line
  do
      # store each line of the message to an aray
      message=("${message[@]}" "$line")
  done <<< "$m"

  # set the message height
  message_height=${#message[@]}

  # store the current cursor location
  tput sc

  # clear the top section for the message box
  clear_space $((${#message[@]} + 2))
    
  TNUM=$(($cols - ${#1} - 4))
  MNUM=$((${#2} + ${#3} + 6))
  NUM=$((${#3} + 6))

  echo "${cyan}"

  # move the cursor to the upper left corner
  tput cup 0 0

  # print the top of the info box
  echo -n "##${magenta} $1 ${cyan}"
  eval printf %.0s# '{1..'"${TNUM}"\}; echo

  # print the middle of the info box
  for i in "${!message[@]}";do
    index=$(($i + 1))

    if [ $index -eq 1 ];then
      echo -n "# ${gold}$2: ${default}${message[$i]}${cyan}"
    else
      echo "# ${default}${message[$i]}${cyan}"
    fi

    # print the right of the info box
    tput cup $index $cols
    echo -n "#"
  done

  # # print the bottom of the info box
  tput cup $(($message_height + 1)) 0
  eval printf %.0s# '{1..'"${cols}"\}; echo

  echo "${default}"

  # return the cursor to its original position
  tput rc
}

# clear the first 4 lines of the terminal
function clear_space() {
  cols=`tput cols`

  for ((row=0;row<$1;row++));do
   tput cup $row 0
    tput ech $cols
  done
}

# initialize the data array as an empty set
data=()

if [ -t 0 ];then
  # handle arguments passed in as non piped arguments
  message_box "$1" "$2" "$3"
else
  # handle arguments passed in from a pipe
  while read -r pipe;do

    #assemble the data array
    data=("${data[@]}" "$pipe")
    
    # if all message components are present
    if [ ${#data[@]} -ge 3 ];then
      
      # build the message box
      message_box "${data[0]}" "${data[1]}" "${data[2]}"

      # lets clear data so we can begin a new count
      data=()
    fi
  done
fi